apply plugin: "java"

version '1.0'

//compile java 16 code, targeting java 8
targetCompatibility = 8
sourceCompatibility = JavaVersion.VERSION_16

sourceSets.main.java.srcDirs = ["src"]
sourceSets.main.resources.srcDirs = ["assets"]
sourceSets.test.java.srcDirs = ["test"]
sourceSets.test.resources.srcDirs = ["testAssets"]
repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v130'
    jabelVersion = "0.4.0"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
    androidJarPath = new File(sdkRoot, "android.jar")
    try {
        platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }
        androidJarPath = new File(platformRoot, "android.jar")
    }catch(ignored){}
    if(!androidJarPath.exists()) println("Warning not exist: $androidJarPath")



}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    compileOnly files(androidJarPath)
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}

test {
    useJUnitPlatform()
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");
        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }
        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")
        def d8 = "d8"
        //try locate
        try {
            d8 = new File(new File("$sdkRoot/build-tools/").listFiles().sort().reverse().find { f -> new File(f, "d8").exists() }, "d8")
            if(!d8.exists())throw new FileNotFoundException("meh")
            d8 = d8.getAbsolutePath()
        }catch(ignored){}
        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }


}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
